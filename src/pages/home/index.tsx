import Head from "next/head";
import { Inter } from "next/font/google";
import Banner from "@/components/Banner";
import { useTranslation } from "next-export-i18n";
import { FC, useEffect, useState } from "react";
import SimpleSlider from "@/components/Sliders/SimpleSlider";
import { BannerType, PosterKinopoiskType } from "@/types/types";
import { useSelector } from "react-redux";
import SliderContinueBrowsing from "@/components/Sliders/SliderContinueBrowsing";
import { Loader } from "@/components/Loader";
import styles from "./Home.module.scss";
import SliderTopTen from "@/components/Sliders/SliderTopTen";
import { selectBrowsingMovie } from "@/Redux/continue_browsing/selectors";
import { BrowsingMovie } from "@/Redux/continue_browsing/reducer";
import { GetStaticProps, NextPage } from "next";

import axios from "axios";
import $api from "@/profileRequests/configeAxios";

type Props = {
  banner: BannerType[];
  bestMovies: PosterKinopoiskType[];
  comediesMovies: PosterKinopoiskType[];
  adventureMovies: PosterKinopoiskType[];
  horrorMovies: PosterKinopoiskType[];
};

const Home: NextPage<Props> = ({
  banner,
  bestMovies,
  comediesMovies,
  adventureMovies,
  horrorMovies,
}) => {
  const { t } = useTranslation();
  const ContinueBrowingmovies: BrowsingMovie[] =
    useSelector(selectBrowsingMovie);
  const [isLoading, setIsLoading] = useState(false);

  return (
    <div className={styles.wrapper}>
      <Head>
        <title>IVI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta httpEquiv="Permissions-Policy" content="interest-cohort=()" />
      </Head>

      <Banner posters={banner} />

      <SliderContinueBrowsing
        title={t("sliders_title.continue_browsing")}
        type={"detailed"}
        movies={ContinueBrowingmovies}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />

      {isLoading && <Loader type="loading_page" />}
      <SimpleSlider
        title={t("sliders_title.best_films")}
        films={bestMovies as PosterKinopoiskType[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />

      <SimpleSlider
        title={t("sliders_title.family_comedies")}
        films={comediesMovies as PosterKinopoiskType[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />
      <SliderTopTen />

      <SimpleSlider
        title={"Захватывающее кино"}
        films={adventureMovies as PosterKinopoiskType[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />
      <SimpleSlider
        title={"Ужасы"}
        films={horrorMovies as PosterKinopoiskType[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />
    </div>
  );
};
export const getStaticProps: GetStaticProps = async (context) => {
  const banner = await $api
    .get(`/sliders/banner`)
    .then((response) => response.data);

  const bestMovies = await $api
    .get("/sliders/bestMovies")
    .then((response) => response.data);

  const comediesMovies = await $api
    .get("/sliders/comediesMovies")
    .then((response) => response.data);

  const adventureMovies = await $api
    .get("/sliders/adventureMovies")
    .then((response) => response.data);

  const horrorMovies = await $api
    .get("/sliders/horrorMovies")
    .then((response) => response.data);

  const movies = {
    banner,
    bestMovies,
    comediesMovies,
    adventureMovies,
    horrorMovies,
  };
  return {
    props: {
      banner,
      bestMovies,
      comediesMovies,
      adventureMovies,
      horrorMovies,
    },
  };
};
export default Home;
